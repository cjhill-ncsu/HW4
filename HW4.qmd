---
title: "HW4"
author: "Chris Hill"
format: html
---

## Task 1: Conceptual Questions

#### If your working directory is myfolder/homework/, what relative path would you specify to get the file located at myfolder/MyData.csv?

When working in a folder like myfolder/homework/, to access a file stored at *myfolder/MyData.csv*, you can use *../MyData.csv*. The **..** moves one level up from the current directory.

#### What are the major benefits of using R projects?

R Projects manage working directories efficiently, ensure consistent environments, and keep code and data organized, avoiding issues with relative paths.

#### What is git and what is github?

- Git is a tool that tracks changes in files, allowing you to see the history of edits and revert back to previous versions. 

- GitHub is an online platform that hosts Git repositories. This makes it easier to share code and manage collaborative projects..

#### What are the two main differences between a tibble and a data.frame?

- Tibbles don’t convert strings to factors by default.

- They also display data in a cleaner, more user-friendly way by showing only the part of the dataset that fits the screen

#### Rewrite the following nested function call using BaseR’s chaining operator:

```{r}
#| echo: false
#| warning: false
#| message: false
library(tidyverse)
```

```{r}
arrange(filter(select(as_tibble(iris), starts_with("Petal"), Species), Petal.Length < 1.55), Species)
```

```{r}
as_tibble(iris) |>
  select(starts_with("Petal"), Species) |>
  filter(Petal.Length < 1.55) |>
  arrange(Species)
```

## Task 2: Reading Delimited Data

### Glass Data

#### Reading in the data and adding column names

```{r}
#| message: false
#| 
glass_data <- read_csv(
  "https://www4.stat.ncsu.edu/~online/datasets/glass.data", 
  col_names = FALSE)

colnames(glass_data) <- c("Id", "RI", "Na", "Mg", "Al", "Si", "K", "Ca", "Ba", "Fe", "Type_of_glass")

glass_data
```

#### Replacing Type_of_glass variable

```{r}
glass_data <- glass_data |>
  mutate(
    Type_of_glass = factor(
      Type_of_glass,
      levels = c(1, 2, 3, 5, 6, 7),
      labels = c(
        "building_windows_float_processed",
        "building_windows_non_float_processed",
        "vehicle_windows_float_processed",
        "containers",
        "tableware",
        "headlamps")
      )
    )

glass_data
```

#### Filtering by Fe < 0.2 and specific glass types

```{r}
filtered_glass <- glass_data |>
  filter(Fe < 0.2 & 
           Type_of_glass %in% c("tableware", "headlamps")
         )

filtered_glass
```

---

### Yeast Data

#### Reading the yeast data and adding column names

```{r}
#| message: false
#| 
column_widths <- fwf_widths(c(12, 6, 6, 6, 6, 6, 6, 6, 6, 3))

yeast_data <- read_fwf(
  "https://www4.stat.ncsu.edu/~online/datasets/yeast.data",
  col_positions = column_widths,
)

colnames(yeast_data) <- c("seq_name", "mcg", "gvh", "alm", "mit", "erl", "pox", "vac", "nuc", "class")

yeast_data
```



## Task 3: Combining Excel and Delimited Data

#### Reading white wine data from Excel

```{r}
library(readxl)

white_wine <- read_xlsx("white-wine.xlsx", sheet = 1)

white_wine
```

#### Reading in the column names from the second sheet and replacing

```{r}
col_names <- read_xlsx("white-wine.xlsx", 
                       sheet = 2)

colnames(white_wine) <- col_names[[1]]

white_wine
```

#### Adding a column to indicate the wine type

```{r}
white_wine <- white_wine |> mutate(type = "white")

head(white_wine$type)
```

#### Reading red wine data and appending a type column

```{r}
#| message: false
red_wine <- readr::read_delim(
  "https://www4.stat.ncsu.edu/~online/datasets/red-wine.csv",
  delim = ";",
  col_names = FALSE,
  skip = 1
  )

colnames(red_wine) <- col_names[[1]]

red_wine <- red_wine |> mutate(type = "red")

red_wine
head(red_wine$type)
```

#### Combining red and white wine data

```{r}
combined_wine <- bind_rows(white_wine, red_wine)

combined_wine
```

#### Filtering, sorting, and selecting specific variables

```{r}
final_wine_data <- combined_wine |>
  filter(quality > 6.5 & alcohol < 132) |>
  arrange(desc(quality)) |>
  select(contains("acid"), alcohol, type, quality) |>
  group_by(quality) |>
  mutate(mean_alcohol = mean(alcohol), sd_alcohol = sd(alcohol))
```

```{r}
#| message: false
#| echo: false
library(kableExtra)

knitr::kable(final_wine_data) |>
  kable_styling(
    bootstrap_options = c("striped", "hover", "condensed"), 
    full_width = TRUE) |>
  scroll_box(height = "500px")
```

